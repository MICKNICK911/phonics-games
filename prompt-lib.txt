Core Principles for Coding Prompts  
1.Atomic Instructions 
   - Break tasks into tiny, unambiguous steps.  
2.Context Control 
   - Explicitly set language, frameworks, and constraints.  
3.Defensive Prompting 
   - Anticipate edge cases and errors.  
4.Structured Output 
   - Demand specific formats (JSON, YAML, tests, etc.).  

//////////////////////////////////////////////////////////////////////SUPERTEMP
**Role**: You are a {Senior X Engineer} expert in {Language/Framework}.  
**Task**: Create {specific output} that solves {business goal}.  

**Requirements**:  
1. Language: {Python/JS/Go/etc.}  
2. Libraries: {Only use stdlib/allowed: pandas, React/etc.}  
3. Input: {Define input format/scructure}  
4. Output: {Define exact output format}  
5. Constraints:  
   - Time: O(n)  
   - Space: O(1)  
   - Edge cases: {list critical cases}  
6. Documentation:  
   - Add {docstrings/TS types}  
   - Include {error handling} for {specific failures}  

**Reasoning Steps**:  
1. First, {explain approach}  
2. Then, {handle edge case X}  
3. Finally, {optimize for Y}  

**Example Format**:  
{Show input/output example or code snippet}  

**Deliver**:  
{File structure / function signature}  


///////////////////////////////////////////////////////////////////////////////TEMP
You are an expert {language} developer. Your task is to write {a function/script/class} that {detailed description}.

Requirements:
- Language: {Python/JavaScript/Java/etc.}
- Libraries: {Only use standard library / allowed: numpy, pandas, etc.}
- Input: {Describe input parameters, format, and any constraints}
- Output: {Describe expected return value or output behavior}
- Edge Cases: {List critical edge cases to handle}
- Time Complexity: {O(n) required, etc.}
- Space Complexity: {O(1) required, etc.}

Additional Instructions:
{Any special formatting, error handling, or comments needed}

Think step by step:
1. {Ask the model to outline the approach}
2. {Ask to consider edge cases}
3. {Ask to write efficient code}

Example:
{Provide an example input and expected output, or a code snippet stub}

Now, generate the code as described.


//////////////////////////////////////////////////////////////////////////////////Ex 1
You are a professional JavaScript developer. Write a function `longestCommonPrefix` that takes an array of strings `strs` and returns the longest common prefix string. If there is no common prefix, return an empty string "".

Requirements:
- Use only standard JavaScript (no external libraries).
- Optimize for minimal time complexity.
- Handle edge cases: empty array, array with one string, and when no common prefix exists.

Think step by step:
1. If the array is empty, return "".
2. Take the first string as the initial prefix.
3. Iterate over the rest of the strings and update the prefix by comparing with the current string.
4. If at any point the prefix becomes empty, break early.

Example:
Input: ["flower","flow","flight"]
Output: "fl"

Now, write the JavaScript code.

/////////////////////////////////////////////////////////////////////////////Ex2
You are a senior Java architect. Design a class `MinStack` that supports:
- `void push(int val)`: pushes element val onto the stack.
- `void pop()`: removes the element on the top.
- `int top()`: gets the top element.
- `int getMin()`: retrieves the minimum element in the stack.

Constraints:
- All operations must run in O(1) time per call.
- Use two stacks: one for main stack and one for min tracking.

Think step by step:
1. Use two stacks: `stack` and `minStack`.
2. On push: push to `stack`. If `minStack` is empty or val <= current min, push to `minStack`.
3. On pop: pop from `stack`. If the popped value equals the top of `minStack`, pop from `minStack`.
4. `top()` returns top of `stack`.
5. `getMin()` returns top of `minStack`.

Example Usage:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // returns -3
minStack.pop();
minStack.top();    // returns 0
minStack.getMin(); // returns -2

Now, write the Java class accordingly.

//////////////////////////////////////////////////////////////////////////////////Ex3
You are a senior Python developer. Write a function `merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]` that merges two sorted lists into one sorted list without using any built-in sort functions.

Requirements:
- Time complexity: O(n+m) where n and m are the lengths of the two lists.
- Space complexity: O(n+m) for the output list (acceptable).
- Handle empty lists appropriately.

Think step by step:
1. Use two pointers starting at the beginning of both lists.
2. Compare elements at the pointers and append the smaller one to the result.
3. If one list is exhausted, append the rest of the other list.

Example:
Input: list1 = [1,3,5], list2 = [2,4,6]
Output: [1,2,3,4,5,6]

Now, write the code.

//Ex4
**Role**: Senior Data Engineer using Python 3.10+  
**Task**: Create a parallel CSV processor that calculates mean sales per region.  

**Requirements**:  
1. Language: Python (stdlib only)  
2. Input: List of CSV paths (100GB+ total)  
3. Output: JSON {"region": mean_sales}  
4. Constraints:  
   - Use multiprocessing.Pool  
   - Handle corrupt rows gracefully  
   - Memory: O(1) per worker  
5. Documentation:  
   - Type hints for all functions  
   - Logging on errors  

**Reasoning Steps**:  
1. Chunk files into 10MB batches  
2. Worker: Parse, filter NaNs, calculate per-file means  
3. Reduce: Merge regional dictionaries  

**Example Input**:  
['/data/sales_q1.csv', '/data/sales_q2.csv']  

**Deliver**:  
def process_csvs(file_paths: list[str]) -> dict:  
    ...  
    
 /////////////////////////////////////////////////////////////////////Ex5   
**Role**: Senior Frontend Engineer using React 18 + TypeScript  
**Task**: Create a paginated data table with sortable columns.  

**Requirements**:  
1. Framework: React + react-table v8  
2. Props:  
   - data: T[]  
   - pageSize: number  
3. Features:  
   - Client-side sorting/pagination  
   - Loading skeletons  
   - Mobile-responsive  
4. Documentation:  
   - JSDoc for all props  
   - Error boundaries  

**Reasoning Steps**:  
1. Create useSortableTable hook  
2. Memoize sorted data  
3. Implement pagination slice  

**Example Format**:  
<DataTable  
  data={users}  
  pageSize={10}  
/>  

**Deliver**:  
export default function DataTable<T>({...}: Props<T>) { ... }  


//////////////////////////////////////////////////////////////////////////Ex6
**Role**: SRE using Bash on Ubuntu 22.04  
**Task**: Create a server monitoring script  

**Requirements**:  
1. Run every 5min via cron  
2. Check:  
   - Disk usage >90%  
   - Memory usage >80%  
   - Service httpd status  
3. Output:  
   - JSON to /var/log/server_stats.json  
   - Slack alert on failures  
4. Constraints:  
   - Use jq for JSON  
   - Zero dependencies  

**Reasoning Steps**:  
1. Capture metrics with /proc and df  
2. Compare against thresholds  
3. Curl to Slack webhook on failure  

**Deliver**:  
#!/bin/bash  
# Script name: server_monitor.sh  
...  

///////////////////////////////////////////////////////////////////////
**Role**: Senior Frontend Engineer specializing in educational games  
**Task**: Recreate "Learning Game Web App" with identical functionality and styling  
**Reference Logic**:  
- Dual-screen interface with task configuration and gameplay  
- Dynamic dictionary management for learning activities  
- Grid-based selection system with scoring  
- Win/loss detection with custom thresholds  

**Requirements**:  
1. Languages: HTML5, CSS3, JavaScript (ES6)  
2. Core Mechanics:  
   - Initial screen for task creation (3 input fields + add button)  
   - Game screen with shuffled item grid  
   - Color-coded selection feedback (green=correct, red=incorrect)  
   - Score tracking with win/loss screens  
3. UI Components:  
   - Black background with Times New Roman font  
   - Large START button (red text, transparent background)  
   - Grid layout with 10 columns  
   - Absolute-positioned score display (yellow)  
4. Styling Constraints:  
   - Grid items: 45px bold white text  
   - Input fields: transparent background, white text  
   - Win screen: green background with "Excellent!"  
   - Loss screen: red background with "Try Again"  

**Implementation Rules**:  
- Use CSS Grid for gameplay area  
- Maintain state:  
  • `dictionary` - array of tasks  
  • `currentItem` - active task index  
  • `score` - current points  
  • `failscore` - error counter  
- Implement core functions:  
  1. `updateScreen()` - renders current task  
  2. `resetScreen()` - resets gameplay  
  3. `shuffleArray()` - randomizes items  
  4. Event handlers for buttons/grid items  

**Critical Details**:  
- Pre-populated dictionary with 6 phonics tasks  
- Radio button system for task selection (labeled "QUIZ 1-6")  
- Win condition: `tappedCorrectItems === correctItems.length`  
- Loss condition: `failscore >= targetList.length`  
- Score calculation: +1 correct, -1 incorrect  

**DOM Structure Requirements**:  
```html
<div id="initial-screen">
  <div style="display: flex;">
    <input id="text-field-1" placeholder="ENTER 1 TASK">
    <input id="text-field-2" placeholder="ENTER LIST 1">
    <input id="text-field-3" placeholder="ENTER LIST 2">
  </div>
  <button id="add-text-btn">Add Task</button>
  <button id="generate-text-btn">START</button>
</div>

<div id="second-screen" style="display: none;">
  <div id="score">Score: 0</div>
  <button id="reset-btn">Reset</button>
  <div id="radio-buttons"></div>
  <h1 id="heading"></h1>
  <div id="grid-list"></div>
</div>

/////////////////////////////////////////////////////////////////////////////////////////
Create a letter selection game where players click letters while avoiding traps. The game should have:

1. **Game Board**
   - Letters displayed in vertical sliding panels
   - Three letters per panel (2 consonants, 1 vowel)
   - Letters scale up 10% on hover

2. **Game Mechanics**
   - Two modes (toggle with button):
     * Consonant Safe: Click consonants, avoid vowels
     * Vowel Safe: Click vowels, avoid consonants
   - Correct click: Slide panel up, reveal new panel
   - Wrong click: Game over

3. **Scoring & Timing**
   +10 points per correct letter
   Countdown timer (default 8 seconds)
   Time displays: "Score: X | Ys"

4. **Controls**
   - Consonant/Vowel toggle button
   - Uppercase/Lowercase toggle button
   - Timer adjustment input
   - Reset button

5. **Screens**
   - Green start screen: "Ready?" with Start button
   - Red game over screen: Shows final score/time
   - Yellow score display (top-right)

6. **Visual Design**
   - Color rotation: #FFB3BA, #BAFFC9, #BAE1FF, #FFDFBA, #D0BAFF
   - Text shadows: 2px 2px 4px rgba(0,0,0,0.3)
   - Full viewport height/width


///////////////////////////////////////////////////////////////////////////////
   Create a phonics learning game with two screens:
1. **Setup Screen**
   - Three input fields:
     * Task name ("Find Vowels")
     * Item list ("a,b,c,d")
     * Target answers ("a,e,i,o,u")
   - Green "Add Task" button
   - Big red "START" button (80px text)

2. **Game Screen**
   - Radio buttons to select quizzes (QUIZ 1-6)
   - 10-column grid of letters/phonics
   - Click feedback:
     * Correct → Green text
     * Wrong → Red text
   - Score display (yellow, top-left)

3. **Game Rules**
   - Scoring: +1 correct, -1 wrong
   - Win: Find all targets → Green "Excellent!" screen
   - Lose: Too many mistakes → Red "Try Again" screen

4. **Preloaded Content**
   6 phonics challenges:
   1. Vowels
   2. Consonants
   3. Blends
   4. Beginning blends
   5. Ending blends
   6. Digraphs

5. **Design**
   - Black background
   - White Times New Roman text
   - 45px grid letters
   - Absolute positioned controls
//////////////////////////////////////////////////////////////////

**ROLE**: Senior Frontend Engineer specializing in educational games  
**TASK**: What to do  
**REFERENCE LOGIC**:(Optional)  
- List All
- General Expected
- Logic to apply  
- [dictionaries, list, or language specific jagons] 

**REQUIREMENTS**:  
1. Languages: HTML5, CSS3, JavaScript (ES6)  
2. Core Mechanics:  
   - Initial screen for task creation (3 input fields + add button)  
   - Game screen with shuffled item grid  
   - Color-coded selection feedback (green=correct, red=incorrect)  
   - Score tracking with win/loss screens  
3. UI Components:  
   - Black background with Times New Roman font  
   - Large START button (red text, transparent background)  
   - Grid layout with 10 columns  
   - Absolute-positioned score display (yellow)  
4. Styling Constraints:  
   - Grid items: 45px bold white text  
   - Input fields: transparent background, white text  
   - Win screen: green background with "Excellent!"  
   - Loss screen: red background with "Try Again"  

**IMPLEMENTATION RULES**:  
- Use CSS Grid for gameplay area  
- Maintain state:  
  • `dictionary` - array of tasks  
  • `currentItem` - active task index  
  • `score` - current points  
  • `failscore` - error counter  
- Implement core functions:  
  1. `updateScreen()` - renders current task  
  2. `resetScreen()` - resets gameplay  
  3. `shuffleArray()` - randomizes items  
  4. Event handlers for buttons/grid items  

**CRITICAL DETAILS**:  
- Pre-populated dictionary with 6 phonics tasks  
- Radio button system for task selection (labeled "QUIZ 1-6")  
- Win condition: `tappedCorrectItems === correctItems.length`  
- Loss condition: `failscore >= targetList.length`  
- Score calculation: +1 correct, -1 incorrect  

**DOM STRUCTURE REQUIREMENTS**:  
```html
<div id="initial-screen">
  <div style="display: flex;">
    <input id="text-field-1" placeholder="ENTER 1 TASK">
    <input id="text-field-2" placeholder="ENTER LIST 1">
    <input id="text-field-3" placeholder="ENTER LIST 2">
  </div>
  <button id="add-text-btn">Add Task</button>
  <button id="generate-text-btn">START</button>
</div>

<div id="second-screen" style="display: none;">
  <div id="score">Score: 0</div>
  <button id="reset-btn">Reset</button>
  <div id="radio-buttons"></div>
  <h1 id="heading"></h1>
  <div id="grid-list"></div>
</div>

///////////////////MY CUSTOM////////////////////////////////////////
**ROLE**: Senior Frontend Engineer specializing in educational games  
**TASK**: What to do  

**REQUIREMENTS**:  
1. Language: HTML5, CSS3, JavaScript (ES6)  
2. Libraries: Do not use any third party library
3. Constraints:    
   - No placeholder code
   - Edge cases:(Optional) {list critical cases}  
6. Documentation:(Optional)  
   - Add comments to explain code logic in each step  
   - Include error handling for any specific failures 

**REASONING STEPS**:  
1. First, {explain approach} (Required) 
2. Then, {handle edge case X} (Optional)  
3. Finally, {optimize for Y} (Optional) 

**EXAMPLE FORMAT**:(Optional)  
{Show code snippet}  

///////////////DEBUGGING-PROMPTS/////////////////////////////////
**DEBUGGING REQUEST**:  
{Error message/test failure from working environment}  

**CONTEXT**:  
{Original prompt + generated code}  

**INSTRUCTIONS**:  
1. Analyze root cause  
2. Propose minimal fix  
3. Show corrected code snippet  

**CONSTRAINTS**:  
- Preserve original architecture  
- Explain fix in one sentence  